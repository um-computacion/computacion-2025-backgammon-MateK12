name: CI con Coverage y pylint
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-analyze:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install SDL system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libsdl2-dev \
            libsdl2-image-dev \
            libsdl2-mixer-dev \
            libsdl2-ttf-dev \
            libfreetype6-dev \
            libportmidi-dev

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests and generate coverage report
        env:
          SDL_VIDEODRIVER: dummy
          SDL_AUDIODRIVER: dummy
        run: |
          coverage run -m unittest discover -s src -p "Test_*"
          coverage xml -o cobertura.xml
          coverage report -m > coverage_report.txt

      - name: Run Pylint and generate report
        run: |
          pylint --rcfile=.pylintrc src/ > pylint_report.txt || true

      - name: Generate reports file
        run: |
          cat > generate_reports.py << 'EOF'
          import os

          def read_file(filepath):
              if not os.path.exists(filepath):
                  return f"Error: Report file not found at {filepath}"
              with open(filepath, "r") as f:
                  return f.read()

          coverage_report = read_file("coverage_report.txt")
          pylint_report = read_file("pylint_report.txt")

          reports_content = f"""# Automated Reports

          ## Coverage Report
          ```text
          {coverage_report}
          ```

          ## Pylint Report
          ```text
          {pylint_report}
          ```
          """

          with open("REPORTS.md", "w") as f:
              f.write(reports_content)
          EOF
          python generate_reports.py
      - name: Create Pull Request for reports
        if: github.ref == 'refs/heads/main'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.MY_TOKEN }}
          commit-message: "docs: Update automated reports [skip ci]"
          title: "Automated Reports Update"
          body: |
            ## Automated Reports Update
            This PR contains the latest automated reports:
            - Coverage Report
            - Pylint Report
            Generated by GitHub Actions workflow.
          branch: automated-reports-update
          delete-branch: true
          add-paths: |
            REPORTS.md
